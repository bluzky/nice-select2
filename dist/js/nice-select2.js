!function(l,c){"object"==typeof exports&&"object"==typeof module?module.exports=c():"function"==typeof define&&define.amd?define([],c):"object"==typeof exports?exports.NiceSelect=c():l.NiceSelect=c()}(self,()=>(()=>{"use strict";var __webpack_modules__={462:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\r\n\r\nconst triggerEvent      = (el, type, init = {}) => {\r\n  let EventConstructor;\r\n  if (type === "click") {\r\n    EventConstructor = MouseEvent;\r\n  } else if (type === "change") {\r\n    EventConstructor = Event;\r\n  } else if (type.includes("focus")) {\r\n    EventConstructor = FocusEvent;\r\n  } else {\r\n    EventConstructor = UIEvent;\r\n  }\r\n  const event = new EventConstructor(type, {\r\n    bubbles: true,\r\n    cancelable: false,\r\n    ...init,\r\n  });\r\n  el.dispatchEvent(event);\r\n};\r\n\r\nconst triggerClick      = (el) => triggerEvent(el, "click");\r\nconst triggerChange     = (el) => triggerEvent(el, "change");\r\nconst triggerFocusIn    = (el) => triggerEvent(el, "focusin");\r\nconst triggerFocusOut   = (el) => triggerEvent(el, "focusout");\r\nconst triggerModalOpen  = (el) => triggerEvent(el, "modalopen");\r\nconst triggerModalClose = (el) => triggerEvent(el, "modalclose");\r\n\r\nconst attr              = (el, key) => el[key] !== undefined ? el[key] : el.getAttribute(key);\r\nconst data              = (el, key) => el.getAttribute("data-" + key);\r\nconst hasClass          = (el, className) => el?.classList.contains(className);\r\nconst addClass          = (el, className) => el?.classList.add(className);\r\nconst removeClass       = (el, className) => el?.classList.remove(className);\r\n\r\nconst defaultOptions = {\r\n  data: null,\r\n  searchable: true,\r\n  showSelectedItems: true,\r\n  placeholder: "Select an option",\r\n  searchtext: "Search",\r\n  selectedtext: "selected",\r\n};\r\n\r\nclass NiceSelect {\r\n  constructor(element, options = {}) {\r\n    if (!element) {\r\n      throw new Error(\'No element provided to NiceSelect\');\r\n    }\r\n\r\n    if (!(element instanceof Element)) {\r\n      throw new Error(\'Invalid element provided to NiceSelect - must be a valid DOM element\');\r\n    }\r\n\r\n    this.el               = element;\r\n    this.config           = { ...defaultOptions, ...options };\r\n    this.data             = this.config.data;\r\n    this.selectedOptions  = [];\r\n    this.placeholder      = attr(this.el, "placeholder") || this.config.placeholder;\r\n    this.searchtext       = attr(this.el, "searchtext") || this.config.searchtext;\r\n    this.selectedtext     = attr(this.el, "selectedtext") || this.config.selectedtext;\r\n    this.dropdown         = null;\r\n    this.selectionList    = null;\r\n    this.multiple         = attr(this.el, "multiple");\r\n    this.disabled         = attr(this.el, "disabled");\r\n    this.create();\r\n  }\r\n\r\n  create() {\r\n    Object.assign(this.el.style, {\r\n      opacity: "0",\r\n      width: "0",\r\n      padding: "0",\r\n      height: "0",\r\n      fontSize: "0",\r\n      minHeight: "auto",\r\n    });\r\n\r\n    this.data ? this.processData(this.data) : this.extractData();\r\n    this.renderDropdown();\r\n    this.bindEvent();\r\n  }\r\n\r\n  processData(data) {\r\n    this.options = data.map((item) => ({\r\n      data: item,\r\n      attributes: {\r\n        selected: !!item.selected,\r\n        disabled: !!item.disabled,\r\n        optgroup: item.value === "optgroup",\r\n      },\r\n    }));\r\n  }\r\n\r\n  extractData() {\r\n    const options = Array.from(this.el.querySelectorAll("option,optgroup"));\r\n    const allOptions = [];\r\n    const selectedOptions = [];\r\n\r\n    this.data = options.map((item) => {\r\n      let itemData;\r\n\r\n      if (item.tagName === "OPTGROUP") {\r\n        itemData = { text: item.label, value: "optgroup" };\r\n      } else {\r\n        const text = item.dataset.display ?? item.innerText;\r\n        itemData = {\r\n          text,\r\n          value: item.value,\r\n          extra: item.dataset.extra,\r\n          selected: item.hasAttribute("selected"),\r\n          disabled: item.hasAttribute("disabled"),\r\n        };\r\n      }\r\n\r\n      const attributes = {\r\n        selected: item.hasAttribute("selected"),\r\n        disabled: item.hasAttribute("disabled"),\r\n        optgroup: item.tagName === "OPTGROUP",\r\n      };\r\n\r\n      const optionObj = { data: itemData, attributes, element: null };\r\n\r\n      allOptions.push(optionObj);\r\n\r\n      if (attributes.selected) selectedOptions.push(optionObj);\r\n\r\n      return itemData;\r\n    });\r\n\r\n    this.options          = allOptions;\r\n    this.selectedOptions  = selectedOptions;\r\n  }\r\n\r\n  renderDropdown() {\r\n    const classes = [\r\n      "nice-select",\r\n      attr(this.el, "class") || "",\r\n      this.disabled ? "disabled" : "",\r\n      this.multiple ? "has-multiple" : "",\r\n    ].filter(Boolean);\r\n\r\n    const searchHtml = this.config.searchable\r\n      ? `\r\n      <div class="nice-select-search-box">\r\n        <input type="text" class="nice-select-search" placeholder="${this.searchtext}..." title="search"/>\r\n      </div>\r\n    `\r\n      : "";\r\n\r\n    const html = `\r\n      <div class="${classes.join(" ")}" tabindex="${this.disabled ? "" : 0}">\r\n        <span class="${this.multiple ? "multiple-options" : "current"}"></span>\r\n        <div class="nice-select-dropdown">\r\n          ${searchHtml}\r\n          <ul class="list"></ul>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    this.el.insertAdjacentHTML("afterend", html);\r\n\r\n    this.dropdown = this.el.nextElementSibling;\r\n\r\n    this._renderSelectedItems();\r\n\r\n    this._renderItems();\r\n  }\r\n\r\n  _renderSelectedItems() {\r\n    if (this.multiple) {\r\n      let selectedHtml = "";\r\n\r\n      if (\r\n        window.getComputedStyle(this.dropdown).width === "auto" ||\r\n        this.selectedOptions.length < 2\r\n      ) {\r\n        this.selectedOptions.forEach( (item, index, array) => {\r\n          let text  = item.data.text;\r\n\r\n          if(index !== array.length -1 ){\r\n            text += `, `;\r\n          }\r\n\r\n          selectedHtml += `<span class="current">${text}</span>`;\r\n        });\r\n\r\n        selectedHtml = selectedHtml || this.placeholder;\r\n      } else {\r\n        selectedHtml = `${this.selectedOptions.length} ${this.selectedtext}`;\r\n      }\r\n\r\n      this.dropdown.querySelector(".multiple-options").innerHTML = selectedHtml;\r\n    } else {\r\n      const html =\r\n        this.selectedOptions.length > 0\r\n          ? this.selectedOptions[0].data.text\r\n          : this.placeholder;\r\n\r\n      this.dropdown.querySelector(".current").innerHTML = html;\r\n    }\r\n  }\r\n\r\n  _renderItems() {\r\n    const ul = this.dropdown.querySelector("ul");\r\n\r\n    this.options.forEach((item) => {\r\n\r\n      if(this.multiple && this.config.showSelectedItems){\r\n        this._multipleListAdd(item);\r\n      }\r\n\r\n      ul.appendChild(this._renderItem(item));\r\n    });\r\n  }\r\n\r\n  _renderItem(option) {\r\n    const li      = document.createElement("li");\r\n    li.innerHTML  = option.data.text;\r\n\r\n    if (option.data.extra !== undefined) {\r\n      li.appendChild(this._renderItemExtra(option.data.extra));\r\n    }\r\n\r\n    if (option.attributes.optgroup) {\r\n      addClass(li, "optgroup");\r\n    } else {\r\n      li.setAttribute("data-value", option.data.value);\r\n      const classList = ["option"];\r\n      if (option.attributes.selected) classList.push("selected");\r\n      if (option.attributes.disabled) classList.push("disabled");\r\n      li.classList.add(...classList);\r\n      li.addEventListener("click", (e) => this._onItemClicked(option, e));\r\n    }\r\n\r\n    option.element = li;\r\n\r\n    return li;\r\n  }\r\n\r\n  _renderItemExtra(content) {\r\n    const span      = document.createElement("span");\r\n    span.innerHTML  = content;\r\n    addClass(span, "extra");\r\n\r\n    return span;\r\n  }\r\n\r\n  update() {\r\n    this.extractData();\r\n\r\n    if (this.dropdown) {\r\n      const open = hasClass(this.dropdown, "open");\r\n      this.dropdown.remove();\r\n      this.create();\r\n      if (open) {\r\n        triggerClick(this.dropdown);\r\n      }\r\n    }\r\n\r\n    attr(this.el, "disabled") ? this.disable() : this.enable();\r\n  }\r\n\r\n  disable() {\r\n    if (!this.disabled) {\r\n      this.disabled = true;\r\n      addClass(this.dropdown, "disabled");\r\n    }\r\n  }\r\n\r\n  enable() {\r\n    if (this.disabled) {\r\n      this.disabled = false;\r\n      removeClass(this.dropdown, "disabled");\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    this.resetSelectValue();\r\n    this.selectedOptions = [];\r\n    this._renderSelectedItems();\r\n    this.update();\r\n    triggerChange(this.el);\r\n  }\r\n\r\n  destroy() {\r\n    if(this.selectionList){\r\n      this.selectionList.remove();\r\n    }\r\n    \r\n    if (this.dropdown) {\r\n      this.dropdown.remove();\r\n      this.el.style.display = "";\r\n    }\r\n  }\r\n\r\n  focus(target=\'\'){\r\n    const isOpen = hasClass(this.dropdown, "open");\r\n\r\n    if (!isOpen) {\r\n      addClass(this.dropdown, "open");\r\n      triggerModalOpen(this.el);\r\n    } else {\r\n      if (this.multiple) {\r\n        if (target === this.dropdown.querySelector(".multiple-options")) {\r\n          removeClass(this.dropdown, "open");\r\n          triggerModalClose(this.el);\r\n        }\r\n      } else {\r\n        removeClass(this.dropdown, "open");\r\n        triggerModalClose(this.el);\r\n      }\r\n    }\r\n\r\n    if (hasClass(this.dropdown, "open")) {\r\n      const search = this.dropdown.querySelector(".nice-select-search");\r\n\r\n      if (search) {\r\n        search.value = "";\r\n        search.focus();\r\n      }\r\n\r\n      const focused = this.dropdown.querySelector(".focus");\r\n\r\n      if (focused) removeClass(focused, "focus");\r\n\r\n      const selected = this.dropdown.querySelector(".selected");\r\n      if (selected) addClass(selected, "focus");\r\n\r\n      this.dropdown\r\n        .querySelectorAll("ul li")\r\n        .forEach((item) => (item.style.display = ""));\r\n    } else {\r\n      this.dropdown.focus();\r\n    }\r\n  }\r\n\r\n  updateSelect(){\r\n    console.log(\'test\');\r\n    this.update();\r\n  }\r\n\r\n  bindEvent() {\r\n    this.dropdown.addEventListener("click", (e) => this._onClicked(e));\r\n    this.dropdown.addEventListener("keydown", (e) => this._onKeyPressed(e));\r\n    this.dropdown.addEventListener("focusin", () => triggerFocusIn(this.el));\r\n    this.dropdown.addEventListener("focusout", () => triggerFocusOut(this.el));\r\n    this.el.addEventListener("invalid", () => this._triggerValidationMessage("invalid"));\r\n    this.el.addEventListener("change", () => this.updateSelect());\r\n    window.addEventListener("click", (e) => this._onClickedOutside(e));\r\n\r\n    if (this.config.searchable) this._bindSearchEvent();\r\n  }\r\n\r\n  _bindSearchEvent() {\r\n    const searchBox = this.dropdown.querySelector(".nice-select-search");\r\n    if (searchBox) {\r\n      searchBox.addEventListener("click", (e) => e.stopPropagation());\r\n      searchBox.addEventListener("input", (e) => this._onSearchChanged(e));\r\n    }\r\n  }\r\n\r\n  _onClicked(e) {\r\n    e.preventDefault();\r\n\r\n    this.focus(e.target);\r\n  }\r\n\r\n  _onItemClicked(option, e) {\r\n    const optionEl = e.target;\r\n    if (!hasClass(optionEl, "disabled")) {\r\n      if (this.multiple) {\r\n        if (hasClass(optionEl, "selected")) {\r\n          removeClass(optionEl, "selected");\r\n          this.selectedOptions = this.selectedOptions.filter(\r\n            (item) => item !== option\r\n          );\r\n          const opt = this.el.querySelector(\r\n            `option[value="${optionEl.dataset.value}"]`\r\n          );\r\n          if (opt) {\r\n            opt.removeAttribute("selected");\r\n            opt.selected = false;\r\n          }\r\n\r\n          this._multipleListRemove(option);\r\n        } else {\r\n          addClass(optionEl, "selected");\r\n          this.selectedOptions.push(option);\r\n\r\n          if(this.config.showSelectedItems){\r\n            option.attributes.selected = true;\r\n            this._multipleListAdd(option);\r\n          }\r\n        }\r\n      } else {\r\n        this.options.forEach((item) => removeClass(item.element, "selected"));\r\n\r\n        addClass(optionEl, "selected");\r\n\r\n        this.selectedOptions = [option];\r\n      }\r\n\r\n      this._renderSelectedItems();\r\n\r\n      this.updateSelectValue();\r\n    }\r\n  }\r\n\r\n  setValue(value) {\r\n    const select = this.el;\r\n    let noSelected = true;\r\n\r\n    // Validate input type\r\n    if (select.multiple) {\r\n      if (!Array.isArray(value)) {\r\n        throw new Error(\'setValue expects an array for multiple select elements\');\r\n      }\r\n\r\n      value = value.map(String);\r\n    } else {\r\n      if (Array.isArray(value)) {\r\n        throw new Error(\'setValue expects a single value for non-multiple select elements\');\r\n      }\r\n\r\n      if (value !== null && value !== undefined && typeof value !== \'string\' && typeof value !== \'number\') {\r\n        throw new Error(\'setValue expects a string or number for non-multiple select elements\');\r\n      }\r\n\r\n      value = String(value);\r\n    }\r\n\r\n    for (const opt of select.options) {\r\n      const currentValue = select.multiple\r\n        ? value.includes(opt.value)\r\n          ? opt.value\r\n          : null\r\n        : value;\r\n      if (opt.value === currentValue && !opt.disabled) {\r\n        if (noSelected) {\r\n          select.value = currentValue;\r\n          noSelected = false;\r\n        }\r\n\r\n        opt.setAttribute("selected", true);\r\n        opt.selected = true;\r\n      } else {\r\n        opt.removeAttribute("selected");\r\n        opt.selected = false;\r\n      }\r\n    }\r\n\r\n    if (noSelected && !select.multiple && select.options.length) {\r\n      select.options[0].setAttribute("selected", true);\r\n      select.options[0].selected = true;\r\n      select.value = select.options[0].value;\r\n    }\r\n\r\n    this.update();\r\n  }\r\n\r\n  getValue() {\r\n    const select = this.el;\r\n    if (!select.multiple) return select.value;\r\n\r\n    return Array.from(select.options)\r\n      .filter((opt) => opt.selected)\r\n      .map((opt) => opt.value);\r\n  }\r\n\r\n  updateSelectValue() {\r\n    if (this.selectedOptions.length > 0) {\r\n      this.el.value = this.selectedOptions[0].data.value;\r\n    }\r\n\r\n    const select = this.el;\r\n\r\n    // FIrst mark all options as not selected\r\n    select.querySelectorAll("option").forEach(function (item) {\r\n      item.removeAttribute("selected");\r\n    });\r\n\r\n    // Mark the selected options as selected in the select element\r\n    this.selectedOptions.forEach( item => {\r\n      let el = select.querySelector(`option[value="${item.data.value}"]`);\r\n\r\n      if (el){\r\n        //Change it, cause it works more correctly.\r\n        el.setAttribute("selected", "selected");\r\n        el.selected = true;\r\n      }\r\n    });\r\n\r\n    triggerChange(this.el);\r\n  }\r\n\r\n  resetSelectValue() {\r\n    if (this.multiple) {\r\n      const select = this.el;\r\n      this.selectedOptions.forEach((item) => {\r\n        const el = select.querySelector(`option[value="${item.data.value}"]`);\r\n        if (el) {\r\n          el.removeAttribute("selected");\r\n          el.selected = false;\r\n        }\r\n      });\r\n    } else if (this.selectedOptions.length > 0) {\r\n      this.el.selectedIndex = -1;\r\n    }\r\n\r\n    triggerChange(this.el);\r\n  }\r\n\r\n  _onClickedOutside(e) {\r\n    if (!this.dropdown.contains(e.target)) {\r\n      removeClass(this.dropdown, "open");\r\n      triggerModalClose(this.el);\r\n    }\r\n  }\r\n\r\n  _onKeyPressed(e) {\r\n    const focusedOption = this.dropdown.querySelector(".focus");\r\n    const isOpen = hasClass(this.dropdown, "open");\r\n\r\n    if (e.keyCode === 13) {\r\n      isOpen ? triggerClick(focusedOption) : triggerClick(this.dropdown);\r\n    } else if (e.keyCode === 40) {\r\n      if (!isOpen) {\r\n        triggerClick(this.dropdown);\r\n      } else {\r\n        const next = this._findNext(focusedOption);\r\n        if (next) {\r\n          if (focusedOption) removeClass(focusedOption, "focus");\r\n          addClass(next, "focus");\r\n        }\r\n      }\r\n      e.preventDefault();\r\n    } else if (e.keyCode === 38) {\r\n      if (!isOpen) {\r\n        triggerClick(this.dropdown);\r\n      } else {\r\n        const prev = this._findPrev(focusedOption);\r\n        if (prev) {\r\n          if (focusedOption) removeClass(focusedOption, "focus");\r\n          addClass(prev, "focus");\r\n        }\r\n      }\r\n      e.preventDefault();\r\n    } else if (e.keyCode === 27 && isOpen) {\r\n      triggerClick(this.dropdown);\r\n    } else if (e.keyCode === 32 && isOpen) {\r\n      return false;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _findNext(el) {\r\n    let nextEl = el\r\n      ? el.nextElementSibling\r\n      : this.dropdown.querySelector(".list .option");\r\n    while (nextEl) {\r\n      if (!hasClass(nextEl, "disabled") && nextEl.style.display !== "none")\r\n        return nextEl;\r\n      nextEl = nextEl.nextElementSibling;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _findPrev(el) {\r\n    let prevEl = el\r\n      ? el.previousElementSibling\r\n      : this.dropdown.querySelector(".list .option:last-child");\r\n    while (prevEl) {\r\n      if (!hasClass(prevEl, "disabled") && prevEl.style.display !== "none")\r\n        return prevEl;\r\n      prevEl = prevEl.previousElementSibling;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  _onSearchChanged(e) {\r\n    const text = e.target.value.toLowerCase();\r\n\r\n    if (text === "") {\r\n      this.options.forEach((item) => (item.element.style.display = ""));\r\n    } else if (hasClass(this.dropdown, "open")) {\r\n      const matchReg = new RegExp(text);\r\n      this.options.forEach((item) => {\r\n        item.element.style.display = matchReg.test(item.data.text.toLowerCase())\r\n          ? ""\r\n          : "none";\r\n      });\r\n    }\r\n\r\n    this.dropdown\r\n      .querySelectorAll(".focus")\r\n      .forEach((item) => removeClass(item, "focus"));\r\n\r\n    const firstEl = this._findNext(null);\r\n\r\n    if (firstEl) addClass(firstEl, "focus");\r\n  }\r\n\r\n  _triggerValidationMessage(type) {\r\n    if (type === "invalid") {\r\n      addClass(this.dropdown, "invalid");\r\n      removeClass(this.dropdown, "valid");\r\n    } else {\r\n      addClass(this.dropdown, "valid");\r\n      removeClass(this.dropdown, "invalid");\r\n    }\r\n  }\r\n\r\n  _multipleListAdd(option) {\r\n  \r\n    if(option.data.disabled || option.data.value == "" || !option.attributes.selected){\r\n      return;\r\n    }\r\n\r\n    if(this.selectionList == null){\r\n      this.selectionList\t \t\t= document.createElement(\'ul\');\r\n      this.selectionList.classList.add(\'select-selection-list\');\r\n\r\n      this.el.after(this.selectionList);\r\n    }else if(this.selectionList.querySelector(`[data-value="${option.data.value}"]`) != null){\r\n      return;\r\n    }\r\n\r\n    let li\t \t\t= document.createElement(\'li\');\r\n    li.classList.add(\'select-selection\');\r\n\r\n    li.dataset.value = option.data.value;\r\n\r\n    let html\t  = `\r\n      <button type="button" class="small remove-select-selection">\r\n        <span class=\'remove-select-selection\'>×</span>\r\n      </button>\r\n    `;\r\n\r\n    // Add\r\n    html   += `<span class=\'selected-name\'>${option.data.text}</span>`\r\n\r\n    li.innerHTML\t= html;\r\n\r\n    this.selectionList.appendChild(li);\r\n\r\n    li.querySelectorAll(\'.remove-select-selection\').forEach(el=> el.addEventListener("click", this._multipleListRemove.bind(this)));\r\n  }\r\n\r\n  _multipleListRemove(target) {\r\n\r\n    if(target.target != null){\r\n      target  = target.target;\r\n    }\r\n\r\n    if(target.data == undefined){\r\n      target.closest(\'li.select-selection\').remove();\r\n\r\n      let parent  = target.closest(\'li.select-selection\');\r\n\r\n      this.selectedOptions.forEach(option => {\r\n        if(option.data.value == parent.dataset.value){\r\n          removeClass(option.element, "selected");\r\n          this.selectedOptions.splice(this.selectedOptions.indexOf(option), 1);\r\n          var opt = this.el.querySelector(`option[value="${option.data.value}"]`);\r\n          opt.removeAttribute(\'selected\');\r\n          opt.selected = false;\r\n        }\r\n\r\n        this._renderSelectedItems();\r\n      })\r\n\r\n      return;\r\n    }\r\n\r\n    if(target.element.classList.contains(\'selected\')){\r\n      console.log(target);\r\n      return;\r\n    }\r\n\r\n    let parent  = this.el.parentElement;\r\n    \r\n    let ul      = parent.querySelector(\'.select-selection-list\');\r\n    \r\n    target  = ul.querySelector(`[data-value="${target.data.value}"]`);\r\n\r\n    if(ul != null && target != null){\r\n      target.remove();\r\n    }\r\n\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NiceSelect);\r\nfunction bind(el, options) {\r\n  return new NiceSelect(el, options);\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///462\n\n}')}},__webpack_require__={d:(l,c)=>{for(var t in c)__webpack_require__.o(c,t)&&!__webpack_require__.o(l,t)&&Object.defineProperty(l,t,{enumerable:!0,get:c[t]})},o:(l,c)=>Object.prototype.hasOwnProperty.call(l,c),r:l=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(l,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(l,"__esModule",{value:!0})}},__webpack_exports__={};return __webpack_modules__[462](0,__webpack_exports__,__webpack_require__),__webpack_exports__})());